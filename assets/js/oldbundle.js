/*
  Bundle generated by ChatGPT
  Files included (in order):
  - j_query.js
  - datatables.js
  - InitTiny.js
  - client.js
  - checkbox_radio_manager.js
  - award_general_settings.js
  - judge_settings.js
  - fileupload.js
  - delete.js
  Excluded: fileupload_old.js (legacy/overlapping definitions)
*/

/* ==== BEGIN j_query.js ==== */
// Function to update the display order with AJAX.
function updateDisplayOrder(orderData, sortOrder) {
    $.ajax({
        url: `/xhttp/update/${sortOrder}/display/order`,
        type: 'POST',
        data: { allData: orderData },
        success: function(response) {
            console.log('Update successful', response);
        },
        error: function(error) {
            console.log('Error occurred', error);
        }
    });
}


// Function to make rows sortable and update the order on sort stop.
function sortRow(sortOrder) {
    $('.row_position').sortable({
        delay: 50,
        stop: function() {
            let selectedData = $('.row_position > tr').map(function() {
                return $(this).attr('id');
            }).get();

            // assuming updateDisplayOrder does not return Promise
            updateDisplayOrder(selectedData, sortOrder);

            // we just call reload after updateDisplayOrder is called
            setTimeout(() => {
                location.reload();
            }, 1000); // 1000ms delay before reload
        }
    });
}

document.addEventListener('DOMContentLoaded', function () {
  const tabs = document.querySelectorAll('#tabs li');
  const contents = document.querySelectorAll('#tab-content div');

  tabs.forEach(tab => {
    tab.addEventListener('click', function () {
      const tabName = this.dataset.tab;

      // Remove "is-active" from all tabs
      tabs.forEach(t => t.classList.remove('is-active'));
      this.classList.add('is-active');

      // Remove "is-active" from all content divs
      contents.forEach(c => c.classList.remove('is-active'));
      document.querySelector(`div[data-content="${tabName}"]`).classList.add('is-active');
    });
  });
});




/* ==== END j_query.js ==== */


/* ==== BEGIN datatables.js ==== */
document.addEventListener('DOMContentLoaded', function () {
  const tables = document.querySelectorAll('.data-table');
  tables.forEach(table => {
    new DataTable(table, {
      paging: false,
      searchable: false,
      sortable: false
    });
  });
});


/* ==== END datatables.js ==== */


/* ==== BEGIN InitTiny.js ==== */
tinymce.init({
  selector:'textarea.tinyform',
    setup: function (editor) {
        editor.on('change', function (e) {
            editor.save();
        });
    },
  height: 300,
  plugins: 'textcolor table paste',
  plugins: [
      'advlist','autolink','lists','link image','charmap','print','preview','anchor','pagebreak',
      'searchreplace','wordcount','visualblocks','visualchars','code','fullscreen',
      'insertdatetime','media','contextmenu','paste',
      'table','help'
  ],
    toolbar: 'formatselect | undo redo | styles | bold italic | alignleft aligncenter alignright alignjustify | ' +
          'bullist numlist outdent indent | link image | preview media fullscreen | ' +
          'forecolor backcolor emoticons | pastetext | help',
          paste_as_text: true // Ensures pasted content is plain text
});
/* ==== END InitTiny.js ==== */


/* ==== BEGIN client.js ==== */
// In production, this should check CSRF, and not pass the session ID.
// The customer ID for the portal should be pulled from the
// authenticated user on the server.
document.addEventListener('DOMContentLoaded', async () => {
  let searchParams = new URLSearchParams(window.location.search);
  if (searchParams.has('session_id')) {
    const session_id = searchParams.get('session_id');
    document.getElementById('session-id').setAttribute('value', session_id);
  }
});
/* ==== END client.js ==== */


/* ==== BEGIN checkbox_radio_manager.js ==== */
/*
this code it used to deal with the questions section and manages the followup question triggers when a checkbox or radio type is selected.
*/

if(document.getElementsByClassName('response-type').length > 0) {
    const response_type = document.getElementsByClassName('response-type')

    const checkbox_values = document.getElementById('checkbox-values')
    const checkbox_fu_trigger = document.getElementById('checkbox-fu-trigger')

    const radio_values = document.getElementById('radio-values')
    const radio_fu_trigger = document.getElementById('radio-fu-trigger')

    for (let i = 0; i < response_type.length; i++) {
        response_type[i].addEventListener('click', () => {
            if (response_type[i].value == 'checkbox') {
                document.getElementById('checkbox-options').classList.remove('is-hidden')
                document.getElementById('radio-options').classList.add('is-hidden')
                checkbox_values.required = true
                checkbox_values.placeholder = "Required"

                radio_values.required = false
                radio_values.value = null
                radio_values.placeholder = ''
                radio_fu_trigger.value = null

            } else if (response_type[i].value == 'radio') {
                document.getElementById('radio-options').classList.remove('is-hidden')
                document.getElementById('checkbox-options').classList.add('is-hidden')
                radio_values.required = true
                radio_values.placeholder = "Required"

                checkbox_values.required = false
                checkbox_values.value = ''
                checkbox_values.placeholder = ''
                checkbox_fu_trigger.value = ''
            }
            else {
                document.getElementById('radio-options').classList.add('is-hidden')
                document.getElementById('checkbox-options').classList.add('is-hidden')
                    checkbox_values.required = false
                    checkbox_values.value = ''
                    checkbox_values.placeholder = ''
                    checkbox_fu_trigger.value = ''

                    radio_values.required = false
                    radio_values.value = ''
                    radio_values.placeholder = ''
                    radio_fu_trigger.value = ''
            }
        })
    }
}

function followup_questions(type) {
    if(document.getElementById(type+'-followup-questions').checked==true){
        if(document.getElementById(type+'-values').value == ''){
         //   document.getElementById(type+'-response-question').innerHTML = ''
            document.getElementById(type+'-values').classList.add('input_red_border')
            document.getElementById('complete-'+type+'-values-first').classList.remove('is-hidden')
            document.getElementById(type+'-followup-questions').checked = false
            document.getElementById(type+'-followup-question-trigger').setAttribute('required', '')
            document.getElementById(type+'-follow-up-questions-text').classList.add('is-hidden')
        }
        else{
            document.getElementById(type+'-response-question').innerHTML = 'What response from your entry above will trigger the follow up question? You will be able to write the question once you\'ve submitted this form.'
            document.getElementById('complete-'+type+'-values-first').classList.add('is-hidden')
            document.getElementById(type+'-followup-question-select').classList.remove('is-hidden')
            document.getElementById(type+'-followup-question-trigger').setAttribute('required', 'required')
            const type_values_array =  document.getElementById(type+'-values').value.split(',')
            for(let i=0;i<type_values_array.length;i++){
                document.getElementById(type+'-followup-question-trigger').innerHTML+='<option value="'+type_values_array[i]+'">'+type_values_array[i]+'</option>'
            }
        }
    }
}

function clear_trigger(type){
        let select_item = document.getElementById(type+'-followup-question-trigger');
        let options = select_item.getElementsByTagName('option');
        for (var i=options.length; i--;) {
            select_item.removeChild(options[i]);
        }

        document.getElementById(type+'-followup-question-select').classList.add('is-hidden')
        document.getElementById(type+'-followup-questions').checked = false
}

function numeric_scale(){
    if(document.getElementById(type+'-followup-questions').checked==true){
    }
}

function checkValuesInput(field){
    if(document.getElementById(field+"-values").value==''){
        document.getElementById('complete-'+field+'-values').style.display='block'
    }
}

/* ==== END checkbox_radio_manager.js ==== */


/* ==== BEGIN award_general_settings.js ====*/

    //NOMINATOR / NOMINEE SECTION
    const notify_nominee = document.getElementById('notify-nominee')
    const nominee_view_nominator = document.getElementById('nominee-view-nominator')

    const self_nominate = document.getElementById('self-nominate')
    const other_nominate = document.getElementById('other-nominate')
    const hidden_nomination_action = document.getElementById('hidden-nomination-action')
    const submission_information = document.getElementById('submission-information')

    const require_nominee = document.getElementById('require-nominee')
    const require_nominee_label = document.getElementById('require-nominee-label')
    const nominee_label_link = document.getElementsByClassName('nominee-label')
    const go_to_notify_nominee = document.getElementById('go-to-notify-nominee')
    const notify_nominee_message = document.getElementById('notify-nominee-message')

    //onload{
        const notifyNominee = notify_nominee.value;
        const nomineeViewNominator = nominee_view_nominator.value;
        const requireNominee = require_nominee.value;

        if(require_nominee.checked == true){
            notify_nominee.checked = false
            nominee_view_nominator = false
        }

        //we need to make sure the nominee is notified if they are required to submit
        //it's possible that the notify nominee selection is not made which
        require_nominee.addEventListener('click', () => {
            if (require_nominee.checked == true && notify_nominee.checked == false) {
                notify_nominee.checked = false
            }
            if (require_nominee.checked == true) {
                require_nominee_label.classList.remove('has-text-weight-semibold')
            }
        })

    function displayRequireNominee(){
        if(hidden_nomination_action.value == 'both'){
            submission_information.classList.remove('is-hidden')
            submission_information.classList.add('is-block')
            require_nominee_label.classList.add('has-text-weight-semibold')
            document.getElementById('submission-information-text').innerHTML ="You have chosen to allow someone to self-nominate or nominate someone else."
        }
        else if(hidden_nomination_action.value == 'self'){
            submission_information.classList.remove('is-block')
            submission_information.classList.add('is-hidden')
            require_nominee_label.classList.remove('has-text-weight-semibold')
            require_nominee.checked=false
        }
        else if(hidden_nomination_action.value == 'other'){
            submission_information.classList.remove('is-hidden')
            submission_information.classList.add('is-block')
            require_nominee_label.classList.add('has-text-weight-semibold')
            document.getElementById('submission-information-text').innerHTML ="You have chosen to allow someone to nominate someone else."
        }
        else{
            submission_information.classList.remove('is-block')
            submission_information.classList.add('is-hidden')
            require_nominee_label.classList.remove('has-text-weight-semibold')
        }
    }

    //turns the notifiy nominee label to bold so user can easily see what is being referenced
        go_to_notify_nominee.addEventListener('click', () => {
            notify_nominee_label.classList.add('has-text-weight-semibold')
        })


    //change the require_nominee checkbox label to bold when navigating to it from the emails section
    for (let i = 0; i < nominee_label_link.length; i++) {
        nominee_label_link[i].addEventListener('click', () => {
            require_nominee_label.classList.add('has-text-weight-semibold')
        });
    }
//}

/* ==== END award_general_settings.js ==== */


/* ==== BEGIN judge_settings.js ==== */
var judging_start_date = document.getElementById('judging-start-date');
var judging_end_date = document.getElementById('judging-end-date');
const judging_start_date_message = document.getElementById('judging-start-date-message')
const judging_end_date_message = document.getElementById('judging-end-date-message')
var currentDate = new Date()
var judgingStartDate = new Date(judging_start_date.value.toLocaleString('en', {timeZone: 'America/New_York'}))
var judgingEndDate = new Date(judging_end_date.value.toLocaleString('en', {timeZone: 'America/New_York'}))

//onload
if(judgingStartDate < currentDate){
    judging_start_date_message.classList.remove('is-hidden')
    judging_start_date_message.innerText = 'The judging has already started so changing this date is NOT recommended.';
}
else{
    judging_start_date_message.classList.add('is-hidden')
}

if(judgingEndDate < currentDate){
    judging_end_date_message.classList.remove('is-hidden')
    judging_end_date_message.innerText = 'The judging has ended so changing this date is NOT recommended.';
}

if(judgingEndDate < judgingStartDate){
    judging_end_date_message.classList.remove('is-hidden')
    judging_end_date_message.innerText = 'The date you\'ve selected is earlier than the judging start date. Please fix this.';
}

//onchange
judging_start_date.addEventListener('change', () => {
var judgingStartDate = new Date(document.getElementById('judging-start-date').value)
var judgingEndDate = new Date(document.getElementById('judging-end-date').value)
    if (judgingStartDate.toISOString() < currentDate) {
        judging_start_date_message.classList.remove('is-hidden')
        judging_start_date_message.innerText = 'The date you have selected is earlier than today.';
    }
    else{
        judging_start_date_message.classList.add('is-hidden')
    }

    if(judgingEndDate.toISOString() < judgingStartDate.toISOString()){
        judging_end_date_message.classList.remove('is-hidden')
        judging_end_date_message.innerText = 'The date you have selected is earlier than the start date. Please fix this';
    }
    else{
        judging_end_date_message.classList.add('is-hidden')
    }
});

//on end date selection
judging_end_date.addEventListener('change', () => {
var judgingStartDate = new Date(document.getElementById('judging-start-date').value)
var judgingEndDate = new Date(document.getElementById('judging-end-date').value)
    if (judgingEndDate.toISOString() < judgingStartDate.toISOString()) {
        judging_end_date_message.classList.remove('is-hidden')
        judging_end_date_message.innerText = 'The date you have selected is earlier than the start date. Please fix this';
    }
    else {
        judging_end_date_message.classList.add('is-hidden')
    }

});
/* ==== END judge_settings.js ==== */


/* ==== BEGIN fileupload.js ==== */
const allowedExtensions = ['pdf','doc','docx','ppt','xls','txt','xlsx'];
const allowedLogoExtensions = ['jpg','jpeg','png','gif'];

//Strings
const warnings = {
    maxNumber: 'You cannot upload more than ',
    wrongFileType: 'The file is the wrong type.',
    fileTooLarge: 'The file is too large.'
};

function getFileType(fname){
    return fname.slice(fname.lastIndexOf(".") + 1);
}

function formatBytes (bytes, decimals = 2) {
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

function addConsumedFileDetails(file, children) {
    return children += `<li>File Name: ${file.name}<br>File Type: .${getFileType(file.name)}<br>File Size: ${formatBytes(file.size)}</li>`
}

function getFileSizeWarning(maxNumberFiles) {
    return `${warnings.maxNumber}${maxNumberFiles.value} files.`;
}

//---
//start file upload functions
let fileInput = document.querySelector('#candidate-file');
let fileList = document.querySelector('#filelist');
let fileSizeWarning = document.querySelector('#file-size-warning');
let maxNumberFiles = document.querySelector('#maximum-number-files');

if(fileInput){
    fileInput.addEventListener('change', () => {
        let children = "";
        if(fileInput.files.length <= maxNumberFiles.value){
          for(let i = 0; i < fileInput.files.length; i++){
            let file = fileInput.files.item(i);
            if(allowedExtensions.includes(getFileType(file.name)) && file.size <= 1000000){
                children = addConsumedFileDetails(file, children);
            }
          }
          fileList.innerHTML = '<ol class="file-list-ol">' + children + '</ol>';
        }
        else if(fileInput.files.length > maxNumberFiles.value) {
           fileSizeWarning.innerHTML = getFileSizeWarning(maxNumberFiles);
        }
      });
}

let logoInput = document.querySelector("#logo input[type=file]");
let warning = document.getElementById('warningmsg')

if (logoInput.files.length > 0) {
    let file = logoInput.files[0];
    let fileName = document.querySelector("#logo .file-name");
    fileName.textContent = file.name;

    validateLogoFile(fileName, warning, file);
}

function validateLogoFile(fileName, warning, file) {
    if (!allowedLogoExtensions.includes(getFileType(fileName))) {
        warning.innerText = warnings.wrongFileType;
    }
    else if(file.size > 500000)
    {
        warning.innerText = warnings.fileTooLarge;
    }
    else warning.innerText = file.name
}

//end file upload functions
/* ==== END fileupload.js ==== */


/* ==== BEGIN delete.js ==== */
const HTTP_GET = "GET";

function deleteEntity(table, dbcolumn, slug_var) {
    let recordType;
    if (table === 'questions_follow_up') {
        recordType = 'follow-up question';
    } else {
        recordType = table.substring(0, table.length - 1); // Remove the last 's' to get singular form
    }
    Swal.fire({
        title: "",
        text: `Are you sure you want to delete this ${recordType}? This action cannot be undone.`,
        showCancelButton: true,
        confirmButtonColor: "#d33",
        confirmButtonText: "Yes, delete it!",
    }).then((result) => {
        if (result.isConfirmed){
            let requestPath = `/xhttp/${table}/delete/${dbcolumn}/${slug_var}`;
            let httpRequest = new XMLHttpRequest();
            httpRequest.open('DELETE', requestPath, true);
            httpRequest.onload = function() {
                if (this.status == 200) {
                    Swal.fire('', `The ${recordType}  has been successfully deleted.`, 'success').then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire('Error', 'There was an error deleting the record.', 'error');
                }
            };
            httpRequest.send();
        }
    });
}

function setupDeleteButtons(selector, table, dbColumn) {
    const buttons = document.querySelectorAll(selector);
    buttons.forEach(button => {
        button.addEventListener('click', () => {
            const slug = button.dataset.slug;
            if (slug) {
                deleteEntity(table, dbColumn, slug);
            } else {
                console.error(`Slug not found on the button element with selector: ${selector}`);
            }
        });
    });
}

// Set up delete buttons for nominations and sections
setupDeleteButtons('.delete-nomination', 'nominations', 'nomination_slug');
setupDeleteButtons('.delete-section', 'sections', 'section_slug');
setupDeleteButtons('.delete-question', 'questions', 'question_slug');
setupDeleteButtons('.delete-fu-question', 'questions_follow_up', 'fu_slug');


function deleteRecord(table, dbColumn, slug_var) {
    deleteEntity(table, dbColumn, slug_var);
}

function deleteFuQuestion(award_slug, fu_slug) {
    deleteEntity("fuquestion", award_slug, fu_slug + "deleteFUQuestion");
}

function deleteQuestion($award_slug, question_slug) {
    deleteEntity("question", $question_slug);
}

function deleteControlPanel(branch_slug) {
    deleteEntity("cp", branch_slug, "deleteControlPanel");
}

/* ==== END delete.js ==== */


function displayJudging(award_slug){
    const use_judging = document.getElementById('use-judging');
    const display_judging = document.getElementById('display-judging');
    const require_field = document.querySelectorAll('.required');

    if(use_judging && use_judging.checked){
        require_field.forEach(field => field.required = true);
        if (display_judging) {
            display_judging.style.display = 'block';
        }
    }
    else{
        var xhttp = new XMLHttpRequest();
        xhttp.open("GET", "/app/judging/off/"+award_slug, true);
        xhttp.onreadystatechange = function() {
            if (this.readyState == 4 && this.status == 200) {
                require_field.forEach(field => field.required = false);
                if (display_judging) {
                    display_judging.style.display = 'none';
                }
            }
        };
        xhttp.send();
    }
}

//modal
  document.addEventListener('DOMContentLoaded', () => {
    // Functions to open and close a modal
    function openModal($el) {
      $el.classList.add('is-active');
    }

    function closeModal($el) {
      $el.classList.remove('is-active');
    }

    function closeAllModals() {
      (document.querySelectorAll('.modal') || []).forEach(($modal) => {
        closeModal($modal);
      });
    }

    // Add a click event on buttons to open a specific modal
    (document.querySelectorAll('.js-modal-trigger') || []).forEach(($trigger) => {
      const modal = $trigger.dataset.target;
      const $target = document.getElementById(modal);

      $trigger.addEventListener('click', () => {
        openModal($target);
      });
    });


    // Add a mouseover event on elements to open a specific modal
    (document.querySelectorAll('.js-modal-mouseover-trigger') || []).forEach(($trigger) => {
      const modal = $trigger.dataset.target;
      const $target = document.getElementById(modal);

      $trigger.addEventListener('mouseover', () => {
        openModal($target);
      });
    });

    // Add a click event on various child elements to close the parent modal
    (document.querySelectorAll('.modal-background, .modal-close, .modal-card-head .delete, .modal-card-foot .button') || []).forEach(($close) => {
      const $target = $close.closest('.modal');

      $close.addEventListener('click', () => {
        closeModal($target);
      });
    });

    // Add a keyboard event to close all modals
    document.addEventListener('keydown', (event) => {
      const e = event || window.event;

      if (e.keyCode === 27) { // Escape key
        closeAllModals();
      }
    });
  });

//bulma tabs
function openTab(evt, tabName) {
  document.getElementById('tab-settings').value=tabName
  var i, x, tablinks;
  x = document.getElementsByClassName("content-tab");
  for (i = 0; i < x.length; i++) {
      x[i].style.display = "none";
  }
  tablinks = document.getElementsByClassName("tab");
  for (i = 0; i < x.length; i++) {
      tablinks[i].className = tablinks[i].className.replace(" is-active", "");
  }
  document.getElementById(tabName).style.display = "block";
  evt.currentTarget.className += " is-active";
}

function showPassword(id, showpasswordtext, confirmpasswordtext) {
    const pswd = document.getElementById(id)
    const show_pswd_txt = document.getElementById(showpasswordtext)
    const confirm_pswd_txt = document.getElementById(confirmpasswordtext)
    if(pswd.type === 'password'){
        pswd.type = 'text'
        if(id=='password'){
            show_pswd_txt.innerText='Hide Password'
        }
        else{
            confirm_pswd_txt.innerText='Hide Password'
        }
    }
    else{
        pswd.type = 'password'
        if(id=='password'){
            show_pswd_txt.innerText='Show Password'
        }
        else{
            confirm_pswd_txt.innerText='Show Password'
        }
    }
}

//displays the award when selected from the award list
function display_awards() {
    const awards_list = document.querySelector('#awards-list')
    const arrow = document.querySelector('#arrow')

    if(arrow.classList.contains('fa-caret-up')){
        arrow.classList.replace('fa-caret-up','fa-caret-down')
    }
    else if(arrow.classList.contains('fa-caret-down')){
        arrow.classList.replace('fa-caret-down','fa-caret-up')
    }
    awards_list.classList.toggle('is-hidden')
}

async function switchOnOff(action, awardSlug) {
  const isOn = action === 'on' ? true : action === 'off' ? false : null;
  if (isOn === null) {
    console.error('switchOnOff: invalid action:', action);
    await Swal.fire({
      icon: 'error',
      title: 'Invalid action',
      text: 'Action must be "on" or "off".'
    });
    return;
  }

  const message = isOn
    ? "This will turn the nomination on. The Nomination Start Date will be set to today's date and the Nomination End Date will be set to one month from today. You can adjust these dates afterward."
    : "This will turn the nomination off. The Nomination Start Date and End Date will both be set to today's date. You can adjust these dates afterward.";

  const { isConfirmed } = await Swal.fire({
    title: `Turn nomination ${action}?`,
    text: message,
    showCancelButton: true,
    confirmButtonText: `Turn ${action}`,
    cancelButtonText: 'Cancel',
    reverseButtons: true,
    allowOutsideClick: false,
    focusCancel: true
  });

  if (!isConfirmed) {
    await Swal.fire({ icon: '', title: 'No changes were made' });
    return;
  }

  // Build safe URL
  const url = `/app/${encodeURIComponent(awardSlug)}/${isOn ? 'on' : 'off'}/switch`;

  try {
    const res = await fetch(url, { method: 'POST' }); // POST is safer than GET for state changes
    if (!res.ok) throw new Error(`Request failed with status ${res.status}`);

    await Swal.fire({
      title: `Nomination turned ${action}.`,
      text: 'Please check the Start and End Dates under “Important Dates.”'
    });
  } catch (err) {
    console.error(err);
    await Swal.fire({
      title: 'Update failed',
      text: err.message || 'Something went wrong. Please try again.'
    });
  } finally {
    const reroute = `/app/${encodeURIComponent(awardSlug)}/important_dates/Important%20Dates/singleAward#settings`;
        location.assign(reroute);
    }
}


function swalResponses(message){
    Swal.fire({
        text: message
    })
}

document.addEventListener('DOMContentLoaded', (event) => {
    const selectors = document.querySelectorAll('.chkbox');
    const award_slug = document.getElementById('award_slug')

    selectors.forEach(selector => {
        selector.addEventListener('click', () => {
            const column = selector.value
            const tableid = document.getElementById('table')
            const table = tableid.value
            const xhttp = new XMLHttpRequest();
            xhttp.open('GET', '/app/setcheckbox/' + award_slug.value + '/' +table+ '/' + column , true);

            xhttp.onload = function () {
                if (xhttp.readyState === 4 && xhttp.status === 200) {
                    console.log(xhttp.responseText);
                }
            };

            xhttp.onerror = function () {
                console.error('Request failed.');
            };

            if (selector.checked === false) {
                xhttp.send();
            }

        })
    })
})

function openSettings() {
    const e = document.getElementById('selectaward')
    var award_slug = e.options[e.selectedIndex].value
    window.location.href = "https://nominatepro.com/app/settings/" + award_slug + "/general_settings/General Settings/renderForm";
}

function openDivision() {
    const e = document.getElementById('division')
    var award_slug = e.options[e.selectedIndex].value
    window.location.href = "https://nominatepro.com/app/division/"+e.value+"/index";
}

(function() {
    var burger = document.querySelector('.navbar-burger');
    var menu = document.querySelector('.navbar-menu');
    burger.addEventListener('click', function() {
        burger.classList.toggle('is-active');
        menu.classList.toggle('is-active');
    });
})();


//if a response is required this function toggles the required attribute and message as well as triggering a follow up field if required.
function checkboxCountValues(id, trigger, checkbox_value){
  const check_boxes = document.getElementsByClassName('checkboxes')
  const message = document.getElementById('required_checkbox_message_'+id)

  var count = 0;
  for( let i=0; i < check_boxes.length; i++){
      if(check_boxes[i].checked){
          count++
      }
  }
  for( let i=0; i < check_boxes.length; i++){
      if(count == 0){
          check_boxes[i].setAttribute('required', true);
          message.classList.remove('is-hidden')
      }
      else{
          check_boxes[i].removeAttribute('required');
          message.classList.add('is-hidden')
      }
//            this triggers the follow up area if one is available
      manageCheckboxFollowup(check_boxes, trigger, i, id)
  }
}

function manageCheckboxFollowup(check_boxes, trigger, i, id){
  const checkbox_trigger_reply = document.getElementById('checkbox_trigger_reply_'+id)
  const checkbox_trigger_form = document.getElementById('checkbox_trigger_form_'+id)
  if(check_boxes[i].value == trigger){
      if(check_boxes[i].checked){
          checkbox_trigger_form.classList.remove('is-hidden')
      }
      else{
        checkbox_trigger_reply.value = '';
        checkbox_trigger_form.classList.add('is-hidden')
      }
  }
}

function radioCountValues(id, trigger, radio_value){
    const radios = document.getElementsByClassName('radios')
    const message = document.querySelector('#required_radio_message_'+id)
  var count = 0;
  for( let i=0; i < radios.length; i++){
      if(radios[i].checked){
          count++
      }
  }
  for( let i=0; i < radios.length; i++){
      if(count == 0){
          radios[i].setAttribute('required', true);
          message.classList.remove('is-hidden')
      }
      else{
          radios[i].removeAttribute('required');
          message.classList.add('is-hidden')
      }
//   this triggers the follow up area if one is available
     manageRadioFollowup(radios, trigger, i, id)
  }
}

function manageRadioFollowup(radios, trigger, i, id){
  const radios_trigger_reply = document.getElementById('radios_trigger_reply_'+id)
  const radios_trigger_form = document.getElementById('radios_trigger_form_'+id)
  for( let i=0; i < radios.length; i++){
   if(radios[i].checked){
        if(radios[i].value == trigger){
            radios_trigger_form.classList.remove('is-hidden')
        }
        else{
           radios_trigger_reply.value = '';
           radios_trigger_form.classList.add('is-hidden')
        }
    }
  }
}

function checkOrganizationDuplicate(){
    const name = document.getElementById('organization-name')
    const name_error = document.getElementById('organization-name-error')
    var xhttp = new XMLHttpRequest();

    xhttp.onreadystatechange = function() {
        if (xhttp.readyState == 4 && xhttp.status == 200) {
            if(xhttp.responseText == true){
                name_error.innerText="That name has been taken, please choose a different one."
                name.value=""
            }
            else{
                name_error.innerText=""
            }
        }
    };

    xhttp.open("GET", "/xhttp/organization/duplicate/"+name.value+"/checkDuplicate");
    xhttp.send();
}

function checkDivisionDuplicate(organization_slug){
    const name = document.getElementById('division-name')
    const name_error = document.getElementById('division-name-error')
    var xhttp = new XMLHttpRequest();

    xhttp.onreadystatechange = function() {
        if (xhttp.readyState == 4 && xhttp.status == 200) {
            if(xhttp.responseText == true){
                name_error.innerText="That name has been taken, please choose a different one."
                name.value=""
            }
            else{
                name_error.innerText=""
            }
        }
    };

    xhttp.open("GET", "/xhttp/division/duplicate/"+name.value+"/"+organization_slug);
    xhttp.send();
}

//checks for duplicate emails. the controller determines which Ajax.php to use (xhttp_routes) and which table to look in
function checkDuplicateEmail(id, message, controller){
    const email = document.getElementById(id)
    const email_error = document.getElementById(message)
    var xhttp = new XMLHttpRequest();

    xhttp.onreadystatechange = function() {
        if (xhttp.readyState == 4 && xhttp.status == 200) {
            if(xhttp.responseText == true){
                email_error.innerText="That email address is already registered to a control panel, please enter a different one."
                email.value=""
            }
            else{
                email_error.innerText=""
            }
        }
    };
    xhttp.open("GET", "/xhttp/"+controller+"/duplicate/email/"+email.value);
    xhttp.send();
}

function checkDuplicateAward(id, message){
    const award = document.getElementById(id)
    const award_error = document.getElementById(message)
    var xhttp = new XMLHttpRequest();

    xhttp.onreadystatechange = function() {
        if (xhttp.readyState == 4 && xhttp.status == 200) {
            if(xhttp.responseText == true){
                email_error.innerText="That award has already been created. Please give it another name."
                email.value=""
            }
            else{
                email_error.innerText=""
            }
        }
    };

    xhttp.open("GET", "/xhttp/duplicate/award/"+award.value);
    xhttp.send();
}

function checkUsername(usernameid, usernameerror) {
    const username = document.getElementById(usernameid)
    const name_error = document.getElementById(usernameerror)
    const emailPattern = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*\W)[A-Za-z\d\W]{8,}$/;
    if(emailPattern.test(username.value) == true)
    {
        name_error.innerText="The username cannot be an email address."
        username.value = ""
    }
    else
    {
        name_error.innerText = "";
    }
}


function checkPasswordStrength(passwordid, errormsg)
{
    const password = document.getElementById(passwordid)
    const password_error = document.getElementById(errormsg)
    let regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
    let result = regex.test(password.value)
    console.log(password.value.length)
    if(password.value.length < 12)
    {
        password_error.innerText="The password must be at least 12 characters long."
        password.value = ""
    }
    else if(result === false)
    {
        password_error.innerText="The password is not strong enough or doesn't meet the requirements."
        password.value = ""
    }
    else
    {
        password_error.innerText=""
    }
}

function comparePasswords(password1, password2, errormsg)
{
    const password_1 = document.getElementById(password1)
    const password_2 = document.getElementById(password2)
    const error_msg = document.getElementById(errormsg)
    error_msg.innerText = ""
    if(password_1.value.localeCompare(password_2.value) !== 0)
    {
        error_msg.innerText = "The passwords don\'t match."
        password_1.value = "";
        password_2.value = "";
    }
}

function formatPhoneNumber(id){
    const phone_number = document.getElementById(id);
    const phone_number_value = phone_number.value;

    if(typeof(phone_number_value) !== 'string') phone_number_value = phone_number_value.toString()
    if(phone_number_value.length === 10){
    phone_number.value = phone_number_value.replace(/(\d{3})(\d{3})(\d{4})/, "$1-$2-$3");
    }
}

function logo(id, msg)
{
    const warning = document.getElementById(msg)
    const allowedLogoExtensions = ['jpg','jpeg','png','gif']
        const file = event.target.files[0]
        warning.innerText = ""
        if (!allowedLogoExtensions.includes(getFileType(file.name))) {
            warning.innerText = "Sorry, but that file is the wrong type. Only jpg, jpeg, png and gif files are permitted."
        }
        else if(file.size > 200000)
        {
            warning.innerText = "Sorry, but that is too large. Files cannot be over 200KB."
        }
        else warning.innerText = file.name

    function getFileType(fname, permitted=null){
        return fname.slice((fname.lastIndexOf(".") - 1 >>> 0) + 2);
    }
}

//use for logos
function logoUpload(warningmsg)
{
    const fileInput = document.querySelector("#logo input[type=file]");
    const warning = document.getElementById(warningmsg)
    const allowedLogoExtensions = ['jpg','jpeg','png','gif']
    if (fileInput.files.length > 0) {
        const fileName = document.querySelector("#logo .file-name");
        fileName.textContent = fileInput.files[0].name;
    }

    if (!allowedLogoExtensions.includes(fileName.slice(fileName.lastIndexOf(".") - 1 >>> 0) + 2)) {
        warning.innerText = "The file is the wrong type."
    }
    else if(file.size > 500000)
    {
        warning.innerText = "The file is too large"
    }

    else warning.innerText = file.name
}

function getFileType(fname, permitted=null){
        return fname.slice((fname.lastIndexOf(".") - 1 >>> 0) + 2);
    }

function removeLogo(cp_slug = null, textMessage) {
    var requestPath;
    if(cp_slug){
        requestPath = `/xhttp/cp_logo/${cp_slug}/deleteCPLogo`
    } else{
        requestPath = '/xhttp/sponsor_logo/deleteSponsorLogo'
    }
    Swal.fire({
        text: textMessage,
        showDenyButton: true,
        confirmButtonText: "Yes",
        denyButtonText: "Cancel",
    }).then(result => {
        if (result.isConfirmed){
            let httpRequest = new XMLHttpRequest();
            httpRequest.open('DELETE', requestPath, true);
            httpRequest.onload = function() {
                if (this.status == 200) {
                Swal.fire({
                                    icon: '',
                                    title: '',
                                    text: 'The logo has been deleted!',
                                    confirmButtonText: 'OK'})
                        .then(() => {
                            location.reload();
                        });
                } else {
                    Swal.fire('Error', 'There was an error deleting the logo.', 'error');
                }
            };
            httpRequest.send();
        }
    });
}

//use for judging module in add/edit question
/* no longer being used
document.getElementById('scoring-modulee').addEventListener('change', scoringModule);
function scoringModule(){
    const scoring_module = document.getElementById('scoring-module')
    const scoring_module_panel = document.getElementById('scoring-module-panel')
    if(scoring_module.checked){
        scoring_module_panel.classList.remove('is-hidden')
    }
    else{
        scoring_module_panel.classList.add('is-hidden')
    }
}
*/
//used for likert scale in add/edit question
document.getElementById('numeric-scale').addEventListener('change', scaleForms);
function scaleForms(){
   // const scale = document.getElementById('numeric-scale').value;
    const scale_container  = document.getElementById('scale-container')
    const likertCheckBox = document.getElementById('use-likert')
    const input_container  = document.getElementById('input-container')
    input_container.classList.remove('is-hidden')
    likertCheckBox.checked=false
    scale_container.classList.add('is-hidden')
    //scale_container.innerHTML = ""
//     for( let i = 1; i <= scale; i++){
//         var new_input = document.createElement('input')
//         new_input.id=i;
//         new_input.type = 'text';
//         new_input.classList.add('input')
//         new_input.classList.add('mb-2')
//         new_input.placeholder = "Enter the appropriate response anchor"
//         new_input.name = 'responseAnchors['+i+']'
//         scale_container.appendChild(new_input)
//     }
//     useLikert(scale_container)
}

// document.getElementById('toggle-scale').addEventListener('click', toggleScale);
// function toggleScale()
// {
//     const use_likert = document.getElementById('use-likert')
//     const scale_container  = document.getElementById('scale-container')
//
//     if(use_likert.checked){
//         scale_container.classList.remove('is-hidden')
//     }else{
//         scale_container.classList.add('is-hidden')
//     }
// }

document.getElementById('use-likert').addEventListener('click', useLikert);
function useLikert()
{
    const scale_container  = document.getElementById('scale-container')
    const scale = document.getElementById('numeric-scale').value;
    const use_likert  = document.getElementById('use-likert')
    scale_container.classList.remove('is-hidden')
    if (use_likert.checked){
        scale_container.innerHTML = ""

        for( let i = 1; i <= scale; i++){
            var new_input = document.createElement('input')
            new_input.id = i;
            new_input.type = 'text';
            new_input.classList.add('input')
            new_input.classList.add('mb-2')
            new_input.placeholder = "Enter the appropriate response anchor"
            new_input.name = 'responseAnchors['+i+']'
            scale_container.appendChild(new_input)
        }
    } else{
        scale_container.classList.add('is-hidden')
    }
}




